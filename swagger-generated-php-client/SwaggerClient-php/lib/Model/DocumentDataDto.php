<?php
/**
 * DocumentDataDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * test
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DocumentDataDto Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DocumentDataDto implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DocumentDataDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'protocol_number' => 'int',
        'protocol_date' => 'string',
        'doc_type' => 'int',
        'sender' => 'int',
        'sender_protocol' => 'string',
        'sender_date_protocol' => 'string',
        'doc_category' => 'int',
        'theme' => 'string',
        'ada' => 'string',
        'attached_docs_descr' => 'string',
        'director' => 'string',
        'attached_id' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'protocol_number' => 'protocolNumber',
        'protocol_date' => 'protocolDate',
        'doc_type' => 'docType',
        'sender' => 'sender',
        'sender_protocol' => 'senderProtocol',
        'sender_date_protocol' => 'senderDateProtocol',
        'doc_category' => 'docCategory',
        'theme' => 'theme',
        'ada' => 'ada',
        'attached_docs_descr' => 'attachedDocsDescr',
        'director' => 'director',
        'attached_id' => 'attachedId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'protocol_number' => 'setProtocolNumber',
        'protocol_date' => 'setProtocolDate',
        'doc_type' => 'setDocType',
        'sender' => 'setSender',
        'sender_protocol' => 'setSenderProtocol',
        'sender_date_protocol' => 'setSenderDateProtocol',
        'doc_category' => 'setDocCategory',
        'theme' => 'setTheme',
        'ada' => 'setAda',
        'attached_docs_descr' => 'setAttachedDocsDescr',
        'director' => 'setDirector',
        'attached_id' => 'setAttachedId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'protocol_number' => 'getProtocolNumber',
        'protocol_date' => 'getProtocolDate',
        'doc_type' => 'getDocType',
        'sender' => 'getSender',
        'sender_protocol' => 'getSenderProtocol',
        'sender_date_protocol' => 'getSenderDateProtocol',
        'doc_category' => 'getDocCategory',
        'theme' => 'getTheme',
        'ada' => 'getAda',
        'attached_docs_descr' => 'getAttachedDocsDescr',
        'director' => 'getDirector',
        'attached_id' => 'getAttachedId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['protocol_number'] = isset($data['protocol_number']) ? $data['protocol_number'] : null;
        $this->container['protocol_date'] = isset($data['protocol_date']) ? $data['protocol_date'] : null;
        $this->container['doc_type'] = isset($data['doc_type']) ? $data['doc_type'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['sender_protocol'] = isset($data['sender_protocol']) ? $data['sender_protocol'] : null;
        $this->container['sender_date_protocol'] = isset($data['sender_date_protocol']) ? $data['sender_date_protocol'] : null;
        $this->container['doc_category'] = isset($data['doc_category']) ? $data['doc_category'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['ada'] = isset($data['ada']) ? $data['ada'] : null;
        $this->container['attached_docs_descr'] = isset($data['attached_docs_descr']) ? $data['attached_docs_descr'] : null;
        $this->container['director'] = isset($data['director']) ? $data['director'] : null;
        $this->container['attached_id'] = isset($data['attached_id']) ? $data['attached_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets protocol_number
     * @return int
     */
    public function getProtocolNumber()
    {
        return $this->container['protocol_number'];
    }

    /**
     * Sets protocol_number
     * @param int $protocol_number
     * @return $this
     */
    public function setProtocolNumber($protocol_number)
    {
        $this->container['protocol_number'] = $protocol_number;

        return $this;
    }

    /**
     * Gets protocol_date
     * @return string
     */
    public function getProtocolDate()
    {
        return $this->container['protocol_date'];
    }

    /**
     * Sets protocol_date
     * @param string $protocol_date
     * @return $this
     */
    public function setProtocolDate($protocol_date)
    {
        $this->container['protocol_date'] = $protocol_date;

        return $this;
    }

    /**
     * Gets doc_type
     * @return int
     */
    public function getDocType()
    {
        return $this->container['doc_type'];
    }

    /**
     * Sets doc_type
     * @param int $doc_type
     * @return $this
     */
    public function setDocType($doc_type)
    {
        $this->container['doc_type'] = $doc_type;

        return $this;
    }

    /**
     * Gets sender
     * @return int
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     * @param int $sender
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets sender_protocol
     * @return string
     */
    public function getSenderProtocol()
    {
        return $this->container['sender_protocol'];
    }

    /**
     * Sets sender_protocol
     * @param string $sender_protocol
     * @return $this
     */
    public function setSenderProtocol($sender_protocol)
    {
        $this->container['sender_protocol'] = $sender_protocol;

        return $this;
    }

    /**
     * Gets sender_date_protocol
     * @return string
     */
    public function getSenderDateProtocol()
    {
        return $this->container['sender_date_protocol'];
    }

    /**
     * Sets sender_date_protocol
     * @param string $sender_date_protocol
     * @return $this
     */
    public function setSenderDateProtocol($sender_date_protocol)
    {
        $this->container['sender_date_protocol'] = $sender_date_protocol;

        return $this;
    }

    /**
     * Gets doc_category
     * @return int
     */
    public function getDocCategory()
    {
        return $this->container['doc_category'];
    }

    /**
     * Sets doc_category
     * @param int $doc_category
     * @return $this
     */
    public function setDocCategory($doc_category)
    {
        $this->container['doc_category'] = $doc_category;

        return $this;
    }

    /**
     * Gets theme
     * @return string
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     * @param string $theme
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets ada
     * @return string
     */
    public function getAda()
    {
        return $this->container['ada'];
    }

    /**
     * Sets ada
     * @param string $ada
     * @return $this
     */
    public function setAda($ada)
    {
        $this->container['ada'] = $ada;

        return $this;
    }

    /**
     * Gets attached_docs_descr
     * @return string
     */
    public function getAttachedDocsDescr()
    {
        return $this->container['attached_docs_descr'];
    }

    /**
     * Sets attached_docs_descr
     * @param string $attached_docs_descr
     * @return $this
     */
    public function setAttachedDocsDescr($attached_docs_descr)
    {
        $this->container['attached_docs_descr'] = $attached_docs_descr;

        return $this;
    }

    /**
     * Gets director
     * @return string
     */
    public function getDirector()
    {
        return $this->container['director'];
    }

    /**
     * Sets director
     * @param string $director
     * @return $this
     */
    public function setDirector($director)
    {
        $this->container['director'] = $director;

        return $this;
    }

    /**
     * Gets attached_id
     * @return string[]
     */
    public function getAttachedId()
    {
        return $this->container['attached_id'];
    }

    /**
     * Sets attached_id
     * @param string[] $attached_id
     * @return $this
     */
    public function setAttachedId($attached_id)
    {
        $this->container['attached_id'] = $attached_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
